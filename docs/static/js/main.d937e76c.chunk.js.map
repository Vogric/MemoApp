{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","nameEvent","date","hour","description","state","setState","actualizarState","e","target","name","value","error","setError","onSubmit","preventDefault","trim","id","uuidv4","type","className","placeholder","onChange","Cita","cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d937e76c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Formulario = ({ crearCita }) => {\r\n  const [state, setState] = useState({\r\n    nameEvent: \"\",\r\n    date: \"\",\r\n    hour: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  const actualizarState = (e) => {\r\n    setState({\r\n      ...state,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const { nameEvent, date, hour, description } = state;\r\n\r\n  const submitCita = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      nameEvent.trim() === \"\" ||\r\n      date.trim() === \"\" ||\r\n      hour.trim() === \"\" ||\r\n      description.trim() === \"\"\r\n    ) {\r\n      setError(true);\r\n      return;\r\n    }\r\n    state.id = uuidv4();\r\n    crearCita(state);\r\n    setState({\r\n      nameEvent: \"\",\r\n      date: \"\",\r\n      hour: \"\",\r\n      description: \"\",\r\n    });\r\n  };\r\n\r\n  const [error, setError] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <h2>Add an event to your agenda</h2>\r\n      <form onSubmit={submitCita}>\r\n        <label>Name of the event</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"nameEvent\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Name of the event\"\r\n          onChange={actualizarState}\r\n          value={nameEvent}\r\n        />\r\n        <label>Description</label>\r\n        <textarea\r\n          name=\"description\"\r\n          placeholder=\"Insert a description\"\r\n          className=\"u-full-width\"\r\n          onChange={actualizarState}\r\n          value={description}\r\n        ></textarea>\r\n        <label>Date</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"date\"\r\n          className=\"u-full-width\"\r\n          onChange={actualizarState}\r\n          value={date}\r\n        />\r\n        <label>Hour</label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"hour\"\r\n          className=\"u-full-width\"\r\n          onChange={actualizarState}\r\n          value={hour}\r\n        />\r\n        <button type=\"submit\" className=\"u-full-width button-success \">\r\n          Add Event\r\n        </button>\r\n        {error ? (\r\n          <p className=\"alerta-error animate__animated animate__zoomIn\">\r\n            Make sure you complete everything\r\n          </p>\r\n        ) : null}\r\n      </form>\r\n    </>\r\n  );\r\n};\r\nFormulario.propTypes = {\r\n  crearCita: PropTypes.func.isRequired,\r\n};\r\nexport default Formulario;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst Cita = ({ cita, eliminarCita }) => {\r\n  return (\r\n    <div className=\"cita animate__animated animate__rollIn\">\r\n      <p>\r\n        Name of the event: <span> {cita.nameEvent} </span>\r\n      </p>\r\n      <p>\r\n        Description: <span> {cita.description} </span>\r\n      </p>\r\n      <p>\r\n        Date: <span> {cita.date} </span>\r\n      </p>\r\n      <p>\r\n        Hour: <span> {cita.hour} </span>\r\n      </p>\r\n\r\n      <button\r\n        className=\"button eliminar u-full-width\"\r\n        onClick={() => eliminarCita(cita.id)}\r\n      >\r\n        Delete &times;\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nCita.propTypes = {\r\n  cita: PropTypes.object.isRequired,\r\n  eliminarCita: PropTypes.func.isRequired,\r\n};\r\nexport default Cita;\r\n","import React, { useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\nfunction App() {\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  const [citas, setCitas] = useState(citasIniciales);\n\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n    if (citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas]);\n\n  const crearCita = (cita) => {\n    setCitas([...citas, cita]);\n  };\n\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter((cita) => cita.id !== id);\n    setCitas(nuevasCitas);\n  };\n  const titulo =\n    citas.length === 0 ? \"There are no events assigned\" : \"Manage your events\";\n  return (\n    <>\n      <p className=\"signature\">© 2020 - Braian Vogrič</p>\n      <h1 className=\"animate__animated animate__fadeIn\">MyAgenda</h1>\n      <div className=\"container animate__animated animate__fadeIn\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h2 className=\"citas animate__animated animate__fadeIn\">\n              {titulo}\n            </h2>\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}